<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Hash_Set" Id="{727077f2-d867-0e9a-31ad-aa798d2a6585}" SpecialFunc="None">
    <Declaration><![CDATA[// A collection that contains no duplicate items.
// Implemented using hash table with closed addressing.
{attribute 'enable_dynamic_creation'}
{attribute 'no_assign'}
{attribute 'no_explicit_call' := 'direct call for this function block is not allowed'}
FUNCTION_BLOCK FB_Hash_Set EXTENDS FB_Collection IMPLEMENTS I_Hash_Set
VAR
	pBuckets : POINTER TO POINTER TO T_Hashset_Bucket_Node; // Array of pointers to hash bucket node.
	Bucket_Count : T_Capacity;
	pValues : POINTER TO FB_Array_List;
END_VAR
VAR CONSTANT
	fLoad_Factor : REAL := 0.75;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Internal" Id="{0aa0b0f7-a90c-034f-3d95-8c072ebfebb0}" />
    <Property Name="_Bucket_Count" Id="{99058940-6dea-0c8b-3769-8150a6365eed}">
      <Declaration><![CDATA[// Number of buckets in the hash set.
PROPERTY _Bucket_Count : T_Capacity;]]></Declaration>
      <Get Name="Get" Id="{8b76bbe1-fd5c-0491-1d14-1b81ac2346a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Bucket_Count := THIS^.Bucket_Count;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f17b4f25-0138-04da-3f48-3a646cc42ef4}">
        <Declaration><![CDATA[PROTECTED 
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.Bucket_Count := _Bucket_Count; ]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Clear" Id="{10de16f7-e319-0983-121c-4d3f1939433a}">
      <Declaration><![CDATA[// Empties/Clears/Deletes every item in the set.
METHOD Clear : I_Set
VAR
	i : T_Capacity;
	pCurrent, pNext : POINTER TO T_Hashset_Bucket_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Clear := THIS^;

FOR i := 0 TO THIS^._Bucket_Count - 1 DO
	pCurrent := THIS^.pBuckets[i];
	WHILE pCurrent <> 0 DO
		pNext := pCurrent^.pNext;
		THIS^.Delete_Node(pCurrent);
		pCurrent := pNext;
		END_WHILE
	END_FOR

__DELETE(THIS^.pBuckets);
IF THIS^.pValues <> 0 THEN  __DELETE(THIS^.pValues); END_IF
THIS^._Bucket_Count := 0;
THIS^._Count := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{ef6205dd-24ce-0fb9-0ed5-cc55cea7e040}">
      <Declaration><![CDATA[// Checks if item is contained in set.
METHOD Contains : BOOL
VAR_INPUT
	Item : ANY; // Item to find.
END_VAR
VAR
	Index : T_Position;
	pCurrent : POINTER TO T_Hashset_Bucket_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Index := THIS^.Hash(Item) MOD THIS^.Bucket_Count;

pCurrent := THIS^.pBuckets[Index];

WHILE pCurrent <> 0 DO
	IF F_Compare_Generics(Item, pCurrent^.Data) = T_Comparison.Equal THEN 
		Contains := TRUE;
		THIS^.Clear_Error();
		RETURN; 
		END_IF
	pCurrent := pCurrent^.pNext;
	END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Create_Buckets" Id="{fa91a930-a1df-073c-3506-a641ce270238}" FolderPath="Internal\">
      <Declaration><![CDATA[// Creates buckets and initialises them since user defined types can't be created as arrays dynamically using __NEW(...).
METHOD PROTECTED Create_Buckets : POINTER TO POINTER TO T_Hashset_Bucket_Node
VAR_INPUT
	Count : T_Capacity;
END_VAR
VAR
	pTmp_Buffer : POINTER TO BYTE;
	Size : UDINT;
	i : T_Capacity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count <= 0 THEN RETURN; END_IF

Create_Buckets := __NEW(POINTER TO ST_HASHSET_BUCKET_NODE, TO_UDINT(Count));]]></ST>
      </Implementation>
    </Method>
    <Method Name="Create_Node" Id="{7e3fa978-6100-09d1-2773-a732398df83f}" FolderPath="Internal\">
      <Declaration><![CDATA[// Creates a new node in dynamic memory with a clone of the generic item as it data.
METHOD PROTECTED Create_Node : POINTER TO ST_HASHSET_BUCKET_NODE
VAR_INPUT
	Item : T_Generic;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Create_Node := __NEW(ST_HASHSET_BUCKET_NODE);
Create_Node^.Data := F_Clone_Generic(Item);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Delete_Node" Id="{fc1d11f2-4141-05de-0d31-d1e0f6dd0bd8}" FolderPath="Internal\">
      <Declaration><![CDATA[// Safety deletes node.
// If the node and/or it's value/data is in dynamic memory it/they will be deleted.
METHOD PROTECTED Delete_Node
VAR_INPUT
	pNode : REFERENCE TO POINTER TO T_Hashset_Bucket_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (pNode = 0) THEN RETURN; END_IF 

F_Delete_Generic(pNode^.Data);

CASE Tc2_System.F_CheckMemoryArea(pNode, 1) OF
	Tc2_System.E_TcMemoryArea.Dynamic: __DELETE(pNode);
ELSE
	pNode := 0;
	END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{4d98b848-20dc-0165-2230-f60033d5b22e}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Return if it's an online change.
IF bInCopyCode THEN RETURN; END_IF

THIS^.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f8753b45-8220-0d42-02b6-81af8e7a044e}">
      <Declaration><![CDATA[{attribute 'hide'}
METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Initial_Bucket_Count : T_Capacity; // Number of buckets you want to initialise the hash set with. Use 0 if you don't know.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Return if it's an online change.
IF bInCopyCode THEN RETURN; END_IF

THIS^.pBuckets := THIS^.Create_Buckets(Initial_Bucket_Count);
THIS^._Bucket_Count := SEL(Initial_Bucket_Count > 0,0,Initial_Bucket_Count);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_Values" Id="{97fbfee6-0805-0a49-28f2-8ece5f5c9629}">
      <Declaration><![CDATA[// Gets an immutable list of the values in the set.
METHOD Get_Values : I_Immutable_List
VAR_INST
	fbImmutable_List : FB_Immutable_List;
END_VAR
VAR
	i : T_Capacity;
	pCurrent : POINTER TO T_Hashset_Bucket_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.pValues = 0 THEN THIS^.pValues := __NEW(FB_Array_List(Initial_Capacity := 0)); END_IF
fbImmutable_List(ipList := THIS^.pValues^);
Get_Values := fbImmutable_List;

pValues^.Clear();

FOR i := 0 TO THIS^._Bucket_Count - 1 DO
	pCurrent := THIS^.pBuckets[i];
	WHILE pCurrent <> 0 DO
		pValues^.Insert_Generic(pValues^._Count, pCurrent^.Data);
		pCurrent := pCurrent^.pNext;
		END_WHILE
	END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Hash" Id="{271654d1-9aa5-06c6-22b9-a001da8489ec}" FolderPath="Internal\">
      <Declaration><![CDATA[// Wrapper for murmur3 hash function that generates a value that fits in the upperage of DINT to avoid negative values due to integer overflow.
METHOD PROTECTED Hash : T_Capacity
VAR_INPUT
	Data : T_Generic;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Hash := TO_DINT(F_Murmur3_Hash(Data) MOD TO_DWORD(GVL_Constants.MAX_CAPACITY));]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{2e16fead-8adb-0991-0853-d62b3287d922}">
      <Declaration><![CDATA[// Insert item into set.
METHOD Insert : I_Set
VAR_INPUT
	Item : ANY; // Data to insert
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Insert := THIS^.Insert_Generic(Item, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert_Generic" Id="{997a55a8-e987-044d-3493-e1b491af176d}">
      <Declaration><![CDATA[// Adds new generic item at into set.
// The set will store a copy of the generic item so as to not modify the original value outside it's scope.
METHOD Insert_Generic : I_Set
VAR_INPUT
	Item : T_Generic; // Item to store
END_VAR
VAR_OUTPUT
	bSuccess 	: BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR
VAR
	Index : T_Position;
	pCurrent : POINTER TO T_Hashset_Bucket_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Insert_Generic := THIS^;

IF TO_REAL(THIS^._Count) > (TO_REAL(THIS^.Bucket_Count) * THIS^.fLoad_Factor) OR_ELSE THIS^.Bucket_Count <= 0 THEN
	// Increasing the bucket by 50% once the load factor is reached.
	// Bitwise shifting is the same as multiplying by 1.5, this is done because no complicated casting is needed.
	THIS^.Resize(SEL(THIS^.Bucket_Count > 1, 16, THIS^.Bucket_Count + SHR(THIS^.Bucket_Count, 1)));
	END_IF
	
Index := THIS^.Hash(Item) MOD THIS^.Bucket_Count;

pCurrent := THIS^.pBuckets[Index];

WHILE pCurrent <> 0 DO
	IF F_Compare_Generics(Item, pCurrent^.Data) = T_Comparison.Equal THEN RETURN; END_IF
	pCurrent := pCurrent^.pNext;
	END_WHILE
	
pCurrent := THIS^.Create_Node(Item);
pCurrent^.pNext := THIS^.pBuckets[Index];
THIS^.pBuckets[Index] := pCurrent;

bSuccess := TRUE;
THIS^.Increment_Count();
THIS^.Clear_Error();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{b5b86855-d861-03eb-396c-3fa3a0ae6c60}">
      <Declaration><![CDATA[// Removes item from the set.
METHOD Remove : I_Set
VAR_INPUT
	Item : ANY; // Data to remove
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove := THIS^.Remove_Generic(Item, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove_Generic" Id="{37593fa6-1ef3-04f2-3c07-9bb3cccc2fbe}">
      <Declaration><![CDATA[// Removes generic item from the set.
METHOD Remove_Generic : I_Set
VAR_INPUT
	Item : T_Generic; // Data to remove
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR
VAR
	Index : T_Position;
	pCurrent, pPrevious : POINTER TO T_Hashset_Bucket_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove_Generic := THIS^;

Index := THIS^.Hash(Item) MOD THIS^.Bucket_Count;

pCurrent := THIS^.pBuckets[Index];

WHILE pCurrent <> 0 DO
	IF F_Compare_Generics(Item, pCurrent^.Data) = T_Comparison.Equal THEN
		IF pPrevious <> 0 THEN 
			pPrevious^.pNext := pCurrent^.pNext;
		ELSE
			THIS^.pBuckets[Index] := pCurrent^.pNext;
			END_IF
		THIS^.Delete_Node(pCurrent);
		bSuccess := TRUE;
		THIS^.Decrement_Count();
		THIS^.Clear_Error();
		RETURN;
		END_IF
		
	pPrevious := pCurrent;
	pCurrent := pCurrent^.pNext;
	END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resize" Id="{116acf3b-f52f-00a8-38bc-5e403d729126}">
      <Declaration><![CDATA[// Sets the number of buckets in the hash set.
// Existing items are rehashed and redistributed into the new buckets.
// Note that of the count is 0 the hashtable is cleared.
METHOD Resize : I_Hash_Set
VAR_INPUT
	Count : T_Capacity;
END_VAR
VAR
	Hash : DWORD;
	New_Index : T_Position;
	i : T_Capacity;
	pCurrent, pNext : POINTER TO T_Hashset_Bucket_Node;
	pNew_Bucket : POINTER TO POINTER TO T_Hashset_Bucket_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Resize := THIS^;

IF Count < 0 THEN RETURN; END_IF
IF Count = 0 THEN THIS^.Clear(); RETURN; END_IF

pNew_Bucket := THIS^.Create_Buckets(Count);

FOR i := 0 TO THIS^._Bucket_Count - 1 DO
	pCurrent := THIS^.pBuckets[i];
	WHILE pCurrent <> 0 DO
		pNext := pCurrent^.pNext;
		New_Index := THIS^.Hash(pCurrent^.Data) MOD Count;
		pCurrent^.pNext := pNew_Bucket[New_Index];
		pNew_Bucket[New_Index] := pCurrent;
		pCurrent := pNext;
		END_WHILE
	END_FOR
	
__DELETE(THIS^.pBuckets);
THIS^.pBuckets := pNew_Bucket;
THIS^._Bucket_Count := Count;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>