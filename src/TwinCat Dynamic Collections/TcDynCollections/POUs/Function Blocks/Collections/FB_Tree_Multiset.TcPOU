<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Tree_Multiset" Id="{5c458448-e92e-0762-35b7-1f11cb4915d7}" SpecialFunc="None">
    <Declaration><![CDATA[// A collection similiar to a set except it allows for duplicate items. It is implemented using an iterative AVL Tree.
// This data structure was implemented with the help of Max Goren's iterative AVL tree in C++. See Function Block's body for more details.
{attribute 'enable_dynamic_creation'}
{attribute 'no_assign'}
{attribute 'no_explicit_call' := 'direct call for this function block is not allowed'}
FUNCTION_BLOCK FB_Tree_Multiset EXTENDS FB_Tree_Set
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	https://github.com/maxgoren
	http://www.maxgcoding.com/iterative-avl-trees-insertion/
	http://www.maxgcoding.com/iterative-avl-trees-deletion/

	MIT License
	
	Copyright (c) 2023 Max Goren
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*)
]]></ST>
    </Implementation>
    <Method Name="Insert_Generic" Id="{12be6014-097c-004a-304e-fec5997a33fa}">
      <Declaration><![CDATA[// Adds new generic item at into set.
// The set will store a copy of the generic item so as to not modify the original value outside it's scope.
METHOD Insert_Generic : I_Set
VAR_INPUT
	Item : T_Generic; // Item to store
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR
VAR
	pCurrent, pPrevious : POINTER TO T_AVL_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Insert_Generic := THIS^;

pCurrent := THIS^.pRoot;
pPrevious := pCurrent;

WHILE pCurrent <> 0 DO
	pPrevious := pCurrent;
	CASE F_Compare_Generics(Item, pCurrent^.Data) OF
		T_Comparison.Less 	 : pCurrent := pCurrent^.pLeft;
		T_Comparison.Greater,
		T_Comparison.Equal 	 : pCurrent := pCurrent^.pRight;
	ELSE
		THIS^._Error_Status := F_Error(TRUE, GVL_Errors.ERR_NOT_SUPPORTED, 'Invalid comparison.');
		RETURN;
		END_CASE
	END_WHILE

pCurrent := THIS^.Create_Node(Item);

IF pPrevious = 0 THEN
	THIS^.pRoot := pCurrent;
ELSE
	CASE F_Compare_Generics(Item, pPrevious^.Data) OF
		T_Comparison.Less: pPrevious^.pLeft := pCurrent;
	ELSE
		pPrevious^.pRight := pCurrent;
		END_CASE
	END_IF

pCurrent^.pParent := pPrevious;
	
THIS^.Balance(pCurrent);

bSuccess := TRUE;
THIS^.Increment_Count();
THIS^.Clear_Error(); ]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>