<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Immutable_List" Id="{220e23e9-4352-0626-30cb-dc4b94c4bdc6}" SpecialFunc="None">
    <Declaration><![CDATA[// Collection that exposes only immutable methods and properties of a collection that implements I_List.
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK FB_Immutable_List IMPLEMENTS I_Immutable_List, I_Iterable
VAR_INPUT
	ipList : I_List;
END_VAR
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="_Begin" Id="{92207b48-1c7e-052f-361b-9758d0c8e12d}">
      <Declaration><![CDATA[// Index of the first element.
PROPERTY _Begin : T_Position]]></Declaration>
      <Get Name="Get" Id="{32205f63-0231-075c-2d59-081222e30b0e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Begin := 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Count" Id="{3fde1b6b-a6e6-0058-32dd-40a19f857027}">
      <Declaration><![CDATA[// Number of items in the collection.
PROPERTY _Count : T_Capacity]]></Declaration>
      <Get Name="Get" Id="{585b17a8-9429-09e4-25ef-831e447c5712}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF THIS^.ipList = 0 THEN RETURN; END_IF

_Count := THIS^.ipList._Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Empty" Id="{b4addd8c-1198-049d-186d-d427ae34a254}">
      <Declaration><![CDATA[// Checks if collection is empty.
PROPERTY _Empty : BOOL]]></Declaration>
      <Get Name="Get" Id="{152a8d68-695c-0f8e-21c3-7ed5ebb60ac7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF THIS^.ipList = 0 THEN _Empty := TRUE; RETURN; END_IF
	
_Empty := THIS^.ipList._Empty;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_End" Id="{768f4f4d-05ee-0069-211d-f8b5b8cd62fe}">
      <Declaration><![CDATA[// Index of the last element.
PROPERTY _End : T_Position]]></Declaration>
      <Get Name="Get" Id="{c6ab8748-9c3d-05f5-3c6d-fe2bcfcc2b91}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_End := TO_DINT(THIS^._Count) - 1;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Error_Status" Id="{7ce093dc-ff00-0dd4-1ee4-11602912d52f}">
      <Declaration><![CDATA[// Error status of the collection.
PROPERTY _Error_Status : T_Error]]></Declaration>
      <Get Name="Get" Id="{fc05e27d-bb81-0a39-367f-a4cf39b1f447}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF THIS^.ipList = 0 THEN 
	_Error_Status := GVL_Errors.ERR_INVALID_INTERFACE;
	RETURN; 
	END_IF
	
_Error_Status := THIS^.ipList._Error_Status;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Contains" Id="{4fcdca94-f617-0dd2-307e-9cae2ebc8342}">
      <Declaration><![CDATA[// Checks if item is contained in list.
METHOD Contains : BOOL
VAR_INPUT
	Item : ANY; // Item to find in list
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.ipList = 0 THEN RETURN; END_IF

Contains := THIS^.ipList.Contains(Item);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{44dd7c9d-6706-04c4-3612-fb11232d0244}">
      <Declaration><![CDATA[// Gets item from list at specified location without removing it.
METHOD Get : I_Immutable_List
VAR_INPUT
	Index : T_Position; // Location of item
	Item : ANY;  // Variable to store returned item
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get := THIS^;

IF THIS^.ipList = 0 THEN RETURN; END_IF

THIS^.ipList.Get(Index, Item, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_As_String" Id="{0dc0456f-0e00-0243-0b62-146382486970}">
      <Declaration><![CDATA[// Returns item as a string, if type to string conversion is supported.
METHOD Get_As_String : I_Immutable_List
VAR_INPUT
	Index : T_Position; // Location of item
	sItem : REFERENCE TO STRING; // Variable to store returned item.
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get_As_String := THIS^;

IF THIS^.ipList = 0 THEN RETURN; END_IF

THIS^.ipList.Get_As_String(Index, sItem, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_Type_At" Id="{856e79ed-1989-00bd-0eb7-7ffa44cd118b}">
      <Declaration><![CDATA[// Gets the type of the item at specified location.
METHOD Get_Type_At : I_Immutable_List
VAR_INPUT
	Index : T_Position;
END_VAR
VAR_OUTPUT
	Item_Type : T_Type := T_Type.TYPE_NONE;
	bSuccess : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get_Type_At := THIS^;

IF THIS^.ipList = 0 THEN RETURN; END_IF

THIS^.ipList.Get_Type_At(Index, Item_Type => Item_Type, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Search" Id="{95ec4a4d-297e-0293-07ae-dd23a1ec2150}">
      <Declaration><![CDATA[// Find the location of an item in list.
METHOD Search : I_Immutable_List
VAR_INPUT
	Item : ANY; // Item to find in list
END_VAR
VAR_OUTPUT
	Index : T_Position := -1; //Location of item in list 
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Search := THIS^;

IF THIS^.ipList = 0 THEN RETURN; END_IF

THIS^.ipList.Search(Item, Index => Index, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>