<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Write_Only_List" Id="{9182d7fd-2644-409c-aff4-167d0ab978b1}" SpecialFunc="None">
    <Declaration><![CDATA[// Write Only Decorator for function blocks that impliment I_List interface
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK FB_Write_Only_List EXTENDS FB_Collection IMPLEMENTS I_Write_Only_List
VAR_INPUT
	ipList : I_List;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Exceptions" Id="{01d7a93f-fb56-4c69-8936-09e6e6191e3a}" />
    <Property Name="_Count" Id="{d81641b8-5c3f-41ed-badb-e64d206ece05}">
      <Declaration><![CDATA[(* Returns -1 as this is a write-only list *)
PROPERTY _Count : DINT
]]></Declaration>
      <Get Name="Get" Id="{1fa8f3c7-35b4-4e9f-9392-3926d8db2183}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Count := -1;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Error_Status" Id="{dcc24c06-d0fb-4a70-8a55-79a0db0b534a}">
      <Declaration><![CDATA[PROPERTY _Error_Status : ST_ERROR]]></Declaration>
      <Get Name="Get" Id="{d66d964f-fa89-42f4-ba95-5bfddcdd74dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF THIS^.NullReferenceException() THEN _Error_Status := THIS^.stError; RETURN; END_IF
THIS^.stError := THIS^.ipList._Error_Status;
_Error_Status := F_Error(THIS^.stError.bSTATUS, THIS^.stError.nCODE, THIS^.stError.sSOURCE);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Is_Empty" Id="{8e9c2b64-8b9b-4160-bcb2-daead2934376}">
      <Declaration><![CDATA[(* Returns FALSE as this is a write-only list *)
PROPERTY _Is_Empty : BOOL
]]></Declaration>
      <Get Name="Get" Id="{628a248f-2051-4a66-85bd-cc4c1b574b10}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Add_Back" Id="{7b1287dd-2649-4f81-b964-65c5ab2ce4d7}">
      <Declaration><![CDATA[// Adds an item to the end of the list
METHOD Add_Back : I_Write_Only_List
VAR_INPUT
	Item 	: ANY; // Value to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Add_Back := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Add_Back(Item, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Add_Front" Id="{c90da460-4c32-4440-8eaf-1787eb5245b2}">
      <Declaration><![CDATA[// Adds an item at the front of the list
METHOD Add_Front : I_Write_Only_List
VAR_INPUT
	Item 	: ANY; // Value to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Add_Front := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Add_Front(Item, bSuccess => bSuccess); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{25a73d91-decc-40f5-81fc-00c740294cad}">
      <Declaration><![CDATA[// Empties/Clears/Deletes every item in the collection
METHOD Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{6d18b440-9b80-4187-8faf-ffc2e2589f41}">
      <Declaration><![CDATA[// Adds new item to list at specified location, if index = 0, item will be added at the front, if index = count, item will be added at the back
METHOD Insert : I_Write_Only_List
VAR_INPUT
	Item 	: ANY;  // Item to store in list
	nIndex 	: DINT; // Location of item
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Insert := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Insert(Item, nIndex, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="NullReferenceException" Id="{9eb3fe3d-fecc-4438-8ca2-f8de9026581a}" FolderPath="Exceptions\">
      <Declaration><![CDATA[METHOD PROTECTED NullReferenceException : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[NullReferenceException := THIS^.ipList = 0;
IF NOT NullReferenceException THEN RETURN; END_IF
THIS^.RaiseException(2000+GVL_CmpErrors.ERR_INVALID_REFERENCE, 'Null or Invalid Reference');]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{27b4e4aa-1fac-46f6-b798-41fd8ac325ca}">
      <Declaration><![CDATA[// Removes item at the front of the list and returns nothing
METHOD Remove : I_Write_Only_List
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Remove(bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove_At" Id="{c9825f5a-49c3-43de-8809-6a69f087b470}">
      <Declaration><![CDATA[// Remove item at specified location and return nothing
METHOD Remove_At : I_Write_Only_List
VAR_INPUT
	nIndex : DINT; // Location of item
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove_At := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Remove_At(nIndex, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove_Last" Id="{02f897ad-59fd-4638-8df2-fd17501bfc1b}">
      <Declaration><![CDATA[// Removes item at the back of the list and returns nothing
METHOD Remove_Last : I_Write_Only_List
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove_At := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Remove_Last(bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resize" Id="{e0898826-de81-4247-8142-cb664c9b3513}">
      <Declaration><![CDATA[// Manually resize list. If list becomes smaller, item on higher locations will be deleted.
METHOD Resize : I_Write_Only_List
VAR_INPUT
	nSize : DINT; // New size of list.
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Resize := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Resize(nSize, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reverse" Id="{eeadd024-e87a-45ba-aca1-413a48293c8a}">
      <Declaration><![CDATA[// Reverses the order of items in the list
METHOD Reverse : I_Write_Only_List
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reverse := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Reverse(bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{7820293c-2f16-4c4e-bb78-4df04964fd16}">
      <Declaration><![CDATA[// Adds new item to list in the specified location without resizing list
METHOD Set : I_Write_Only_List
VAR_INPUT
	Item 	: ANY; 	// Item to store in list
	nIndex 	: DINT; // Location of item
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Set := THIS^;
IF THIS^.NullReferenceException() THEN RETURN; END_IF
THIS^.ipList.Set(Item, nIndex, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Write_Only_List">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List._Count.Get">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List._Error_Status.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List._Is_Empty.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Add_Back">
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Add_Front">
      <LineId Id="9" Count="2" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Clear">
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Insert">
      <LineId Id="12" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.NullReferenceException">
      <LineId Id="14" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Remove">
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Remove_At">
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Remove_Last">
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Resize">
      <LineId Id="17" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Reverse">
      <LineId Id="11" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Write_Only_List.Set">
      <LineId Id="19" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>