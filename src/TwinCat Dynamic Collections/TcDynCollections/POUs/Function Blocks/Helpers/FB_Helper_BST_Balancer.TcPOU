<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Helper_BST_Balancer" Id="{617cfb0b-c077-4b97-8aa6-2d90a9a26023}" SpecialFunc="None">
    <Declaration><![CDATA[// Helper to balance Binary Search Tree since recurssion is not supported
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK INTERNAL FINAL FB_Helper_BST_Balancer
VAR_INPUT
	ipList 			: I_List;
	nStart,
	nEnd 			: T_Capacity;  
END_VAR
VAR_OUTPUT
	pNode 			: POINTER TO T_BST_Node;
END_VAR
VAR
	bSuccess		: BOOL;
	nMid 			: T_Capacity;
	pTree_Balancer 	: POINTER TO FB_Helper_BST_Balancer;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ipList = 0 THEN RETURN; END_IF
IF nStart > nEnd THEN RETURN; END_IF

nMid := (nStart+nEnd)/2;
ipList.Get(pNode, nMid, bSuccess => bSuccess);
IF (NOT bSuccess) OR pNode = 0 THEN RETURN; END_IF 

pTree_Balancer := __NEW(FB_Helper_BST_Balancer);
pTree_Balancer^(ipList := ipList, nStart := nStart, nEnd := nMid-1, pNode => pNode^.pLeft);
pTree_Balancer^(ipList := ipList, nStart := nMid+1, nEnd := nEnd, 	pNode => pNode^.pRight);
__DELETE(pTree_Balancer);
]]></ST>
    </Implementation>
    <LineIds Name="FB_Helper_BST_Balancer">
      <LineId Id="112" Count="10" />
      <LineId Id="79" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>