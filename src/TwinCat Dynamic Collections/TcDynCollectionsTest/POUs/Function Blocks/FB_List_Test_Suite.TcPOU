<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_List_Test_Suite" Id="{050c675a-d104-46d6-aa32-81ab9daf327d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_List_Test_Suite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[THIS^.Append_Items_And_Check_If_Count_Changes();
THIS^.Append_Items_And_Get_Items();
THIS^.Prepend_Items_And_Get_Items();
THIS^.Append_Items_Reverse_The_List_And_Get_Items();
THIS^.Append_Find_Item_Indices_And_Get_Items_With_Them();
THIS^.Remove_Tests();
THIS^.Set_Value_At_Index_To_Item_And_Get_Item();]]></ST>
    </Implementation>
    <Method Name="Append_Find_Item_Indices_And_Get_Items_With_Them" Id="{d2cf8329-d126-49e6-be8c-979349ad3a66}">
      <Declaration><![CDATA[// Test appending multiple elements, finds them and verify values using the get method.
METHOD Append_Find_Item_Indices_And_Get_Items_With_Them
VAR_INST
	fbList 		: TcDynCollections.FB_List;
	Idx 		: ARRAY[0..4] OF TcDynCollections.T_Position;
	arbValue 	: ARRAY[0..2] OF BOOL := [TRUE, TRUE];
	arnValue 	: ARRAY[0..2] OF INT := [33, 33];
	arsValue 	: ARRAY[0..2] OF STRING := ['I love cats.', 'I love cats.'];
	arwsValue 	: ARRAY[0..2] OF WSTRING := ["I love dogs.", "I love dogs."];
	arfValue 	: ARRAY[0..2] OF LREAL := [21.3, 21.3];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Append_Find_Item_Indices_And_Get_Items_With_Them');

	fbList
		.Append(arbValue[0])
		.Append(arnValue[0])
		.Append(arsValue[0])
		.Append(arwsValue[0])
		.Append(arfValue[0]);

	// Make the strings dirty. 	
	arsValue[0] 	:= 'kjhsadkfjvhbkjhdfbkvsjhbfkvjhsbkfv';
	arwsValue[0] 	:= "kjhsadkfjvhbkjhdfbkvsjhbfkvjhsbkfv";
	arsValue[0] 	:= 'I love cats.';
	arwsValue[0] 	:= "I love dogs.";
		
	fbList
		.Search(arbValue[0], Index => Idx[0])
		.Search(arnValue[0], Index => Idx[1])
		.Search(arsValue[0], Index => Idx[2])
		.Search(arwsValue[0],Index => Idx[3])
		.Search(arfValue[0], Index => Idx[4]);
		
	fbList
		.Get(Idx[0], arbValue[2])
		.Get(Idx[1], arnValue[2])
		.Get(Idx[2], arsValue[2])
		.Get(Idx[3], arwsValue[2])
		.Get(Idx[4], arfValue[2]);
		
	THIS^.AssertEquals_DINT(5, fbList._Count, 'List item count must be 5 after after appending items to list.');
	THIS^.AssertEquals_BOOL(arbValue[1], arbValue[2], 'Appended BOOL item is not what is expected after the get operation.');
	THIS^.AssertEquals_INT(arnValue[1], arnValue[2], 'Appended INT item is not what is expected after the get operation.');
	THIS^.AssertEquals_STRING(arsValue[1], arsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_WSTRING(arwsValue[1], arwsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_LREAL(arfValue[1], arfValue[2],0.01, 'Appended LREAL item is not what is expected after the get operation.');

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Append_Items_And_Check_If_Count_Changes" Id="{5e2ad20f-59dc-4dff-ada1-18ed97709948}">
      <Declaration><![CDATA[// 1) Test that a newly created FB_Array_List has an item count of 0 and is empty.
// 2) Test that after appending elements, the size increases accordingly and is no longer empty.
// 3) Test that after removing all elements, the size becomes 0 again and the list is empty.
METHOD Append_Items_And_Check_If_Count_Changes
VAR_INST
	fbList : TcDynCollections.FB_List;
	nValue : INT := 33;
	sValue : STRING := 'I love cats.';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Append_Items_And_Check_If_Count_Changes');

	THIS^.AssertEquals_DINT(0, fbList._Count, 'List item count must be 0.');
	THIS^.AssertEquals_BOOL(TRUE, fbList._Empty, 'Is_Empty property didnt return TRUE.');
	
	fbList
		.Append(nValue)
		.Append(sValue);
	
	THIS^.AssertEquals_DINT(2, fbList._Count, 'List item count must be 2 after appending values.');
	THIS^.AssertEquals_BOOL(FALSE, fbList._Empty, 'Is_Empty property didnt return FALSE after appending value.');
	
	fbList.Clear();
	
	THIS^.AssertEquals_DINT(0, fbList._Count, 'List item count must be 0 after clearing list.');
	THIS^.AssertEquals_BOOL(TRUE, fbList._Empty, 'Is_Empty property didnt return TRUE after clearing list.');
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Append_Items_And_Get_Items" Id="{535304e9-c034-4b19-9b66-933654617e91}">
      <Declaration><![CDATA[// Test appending multiple elements and verify their order and values using the get method.
METHOD Append_Items_And_Get_Items
VAR_INST
	fbList 		: TcDynCollections.FB_List;
	
	arbValue 	: ARRAY[0..2] OF BOOL := [TRUE, TRUE];
	arnValue 	: ARRAY[0..2] OF INT := [33, 33];
	arsValue 	: ARRAY[0..2] OF STRING := ['I love cats.', 'I love cats.'];
	arwsValue 	: ARRAY[0..2] OF WSTRING := ["I love dogs.", "I love dogs."];
	arfValue 	: ARRAY[0..2] OF LREAL := [21.3, 21.3];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Append_Items_And_Get_Items');

	fbList
		.Append(arbValue[0])
		.Append(arnValue[0])
		.Append(arsValue[0])
		.Append(arwsValue[0])
		.Append(arfValue[0]);
		
	fbList
		.Get(0, arbValue[2])
		.Get(1, arnValue[2])
		.Get(2, arsValue[2])
		.Get(3, arwsValue[2])
		.Get(4, arfValue[2]);
		
	THIS^.AssertEquals_DINT(5, fbList._Count, 'List item count must be 5 after after appending items to list.');
	THIS^.AssertEquals_BOOL(arbValue[1], arbValue[2], 'Appended BOOL item is not what is expected after the get operation.');
	THIS^.AssertEquals_INT(arnValue[1], arnValue[2], 'Appended INT item is not what is expected after the get operation.');
	THIS^.AssertEquals_STRING(arsValue[1], arsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_WSTRING(arwsValue[1], arwsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_LREAL(arfValue[1], arfValue[2],0.01, 'Appended LREAL item is not what is expected after the get operation.');

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Append_Items_Reverse_The_List_And_Get_Items" Id="{483f3757-3f56-41f4-b18b-bdb9d1ec2949}">
      <Declaration><![CDATA[// Test appending multiple elements, reversing their order and verifiying their order and values using the get method.
METHOD Append_Items_Reverse_The_List_And_Get_Items
VAR_INST
	fbList 		: TcDynCollections.FB_List;
	
	arbValue 	: ARRAY[0..2] OF BOOL := [TRUE, TRUE];
	arnValue 	: ARRAY[0..2] OF INT := [33, 33];
	arsValue 	: ARRAY[0..2] OF STRING := ['I love cats.', 'I love cats.'];
	arwsValue 	: ARRAY[0..2] OF WSTRING := ["I love dogs.", "I love dogs."];
	arfValue 	: ARRAY[0..2] OF LREAL := [21.3, 21.3];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Append_Items_Reverse_The_List_And_Get_Items');

	fbList
		.Append(arbValue[0])
		.Append(arnValue[0])
		.Append(arsValue[0])
		.Append(arwsValue[0])
		.Append(arfValue[0])
		.Reverse();
		
	fbList
		.Get(4, arbValue[2])
		.Get(3, arnValue[2])
		.Get(2, arsValue[2])
		.Get(1, arwsValue[2])
		.Get(0, arfValue[2]);
		
	THIS^.AssertEquals_DINT(5, fbList._Count, 'List item count must be 5 after after appending items to list.');
	THIS^.AssertEquals_BOOL(arbValue[1], arbValue[2], 'Appended BOOL item is not what is expected after the get operation.');
	THIS^.AssertEquals_INT(arnValue[1], arnValue[2], 'Appended INT item is not what is expected after the get operation.');
	THIS^.AssertEquals_STRING(arsValue[1], arsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_WSTRING(arwsValue[1], arwsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_LREAL(arfValue[1], arfValue[2],0.01, 'Appended LREAL item is not what is expected after the get operation.');

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Prepend_Items_And_Get_Items" Id="{bc0efed3-fbba-48dc-b3e8-6228c060fc92}">
      <Declaration><![CDATA[// Test prepending multiple elements and verify their order and values using the get method.
METHOD Prepend_Items_And_Get_Items
VAR_INST
	fbList 		: TcDynCollections.FB_List;
	arsPrint 	: ARRAY[0..4] OF STRING;
	arbValue 	: ARRAY[0..2] OF BOOL := [TRUE, TRUE];
	arnValue 	: ARRAY[0..2] OF INT := [33, 33];
	arsValue 	: ARRAY[0..2] OF STRING := ['I love cats.', 'I love cats.'];
	arwsValue 	: ARRAY[0..2] OF WSTRING := ["I love dogs.", "I love dogs."];
	arfValue 	: ARRAY[0..2] OF LREAL := [21.3, 21.3];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Prepend_Items_And_Get_Items');

	fbList
		.Prepend(arbValue[0])
		.Prepend(arnValue[0])
		.Prepend(arsValue[0])
		.Prepend(arwsValue[0])
		.Prepend(arfValue[0]);
		
	fbList
		.Get(4, arbValue[2])
		.Get(3, arnValue[2])
		.Get(2, arsValue[2])
		.Get(1, arwsValue[2])
		.Get(0, arfValue[2]);
		
	THIS^.AssertEquals_DINT(5, fbList._Count, 'List item count must be 5 after after appending items to list.');
	THIS^.AssertEquals_BOOL(arbValue[1], arbValue[2], 'Appended BOOL item is not what is expected after the get operation.');
	THIS^.AssertEquals_INT(arnValue[1], arnValue[2], 'Appended INT item is not what is expected after the get operation.');
	THIS^.AssertEquals_STRING(arsValue[1], arsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_WSTRING(arwsValue[1], arwsValue[2], 'Appended STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_LREAL(arfValue[1], arfValue[2],0.01, 'Appended LREAL item is not what is expected after the get operation.');

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove_Tests" Id="{60ff91a6-9a36-4dc9-8548-47be6da425d5}">
      <Declaration><![CDATA[// Test appending multiple elements, removing first item, verifying the size and values.
METHOD Remove_Tests
VAR_INST
	fbList 		: TcDynCollections.FB_List;
	i 			: TcDynCollections.T_Position;
	n 			: TcDynCollections.T_Capacity;
	arbValue 	: ARRAY[0..2] OF BOOL := [TRUE, TRUE];
	arnValue 	: ARRAY[0..2] OF INT := [33, 33];
	arsValue 	: ARRAY[0..2] OF STRING := ['I love cats.', 'I love cats.'];
	arwsValue 	: ARRAY[0..2] OF WSTRING := ["I love dogs.", "I love dogs."];
	arfValue 	: ARRAY[0..2] OF LREAL := [21.3, 21.3];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Remove_Tests');

	fbList
		.Append(arbValue[0])
		.Append(arnValue[0])
		.Append(arsValue[0])
		.Append(arwsValue[0])
		.Append(arfValue[0]);
		
	fbList
		.Remove(arbValue[0])
		.Get(0, arnValue[2]);
		
	THIS^.AssertEquals_DINT(4, fbList._Count, 'List item count must be 4 after appending and removing fisrt item at from the list.');
	THIS^.AssertEquals_INT(arnValue[1], arnValue[2],'');
	
	fbList
		.Prepend(arbValue[0])
		.Remove_At(2)
		.Get(2, arwsValue[2]);
		
	THIS^.AssertEquals_DINT(4, fbList._Count, 'List item count must be 4 after prepending removed item and removing item in index 2 of the list.');
	THIS^.AssertEquals_WSTRING(arwsValue[1], arwsValue[2], '');
	
	fbList
		.Insert(2, arsValue[0])
		.Remove_At(fbList._Count - 1)
		.Get(3, arwsValue[2]);
		
	THIS^.AssertEquals_DINT(4, fbList._Count, 'List item count must be 4 after inserting removed from index 2 item and removing the last item in the list.');
	THIS^.AssertEquals_WSTRING(arwsValue[1], arwsValue[2], '');

	n := fbList._Count;
	FOR i := 0 TO n DO
		fbList.Remove_At(fbList._Count - 1);
		END_FOR
		
	THIS^.AssertEquals_DINT(0, fbList._Count, 'List item count must be zero after removing all items from the back.');
	THIS^.AssertEquals_BOOL(TRUE, fbList._Empty, 'List Is_Empty property must be zero TRUE removing all items from the back.');

	FOR i := 0 TO 4 DO fbList.Prepend(arwsValue); END_FOR
	
	THIS^.AssertEquals_DINT(5, fbList._Count, 'Failed to prepend items to list for checking removing all items from the front.');
	
	n := fbList._Count;
	FOR i := 0 TO n - 1 DO
		fbList.Remove_At(0);
		END_FOR
		
	THIS^.AssertEquals_DINT(0, fbList._Count, 'List item count must be zero after removing all items from the front.');
	THIS^.AssertEquals_BOOL(TRUE, fbList._Empty, 'List Is_Empty property must be zero TRUE removing all items from the front.');

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set_Value_At_Index_To_Item_And_Get_Item" Id="{562f1aa5-f7e6-460b-88ab-27dadda3d322}">
      <Declaration><![CDATA[// Test appending multiple elements and verify their order and values using the get method.
METHOD Set_Value_At_Index_To_Item_And_Get_Item
VAR_INST
	fbList 		: TcDynCollections.FB_List;
	
	arbValue 	: ARRAY[0..2] OF BOOL := [TRUE, TRUE];
	arnValue 	: ARRAY[0..2] OF INT := [33, 33];
	arsValue 	: ARRAY[0..2] OF STRING := ['I love cats.', 'I love cats.'];
	arwsValue 	: ARRAY[0..2] OF WSTRING := ["I love dogs.", "I love dogs."];
	arfValue 	: ARRAY[0..2] OF LREAL := [21.3, 21.3];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Set_Value_At_Index_To_Item_And_Get_Item');

	fbList
		.Resize(5)
		.Set(0, arbValue[0])
		.Set(1, arnValue[0])
		.Set(2, arsValue[0])
		.Set(3, arwsValue[0])
		.Set(4, arfValue[0]);
		
	fbList
		.Get(0, arbValue[2])
		.Get(1, arnValue[2])
		.Get(2, arsValue[2])
		.Get(3, arwsValue[2])
		.Get(4, arfValue[2]);
		
	THIS^.AssertEquals_DINT(5, fbList._Count, 'List item count must be 5 after after appending items to list.');
	THIS^.AssertEquals_BOOL(arbValue[1], arbValue[2], 'Get BOOL item is not what is expected after the get operation.');
	THIS^.AssertEquals_INT(arnValue[1], arnValue[2], 'Get INT item is not what is expected after the get operation.');
	THIS^.AssertEquals_STRING(arsValue[1], arsValue[2], 'Get STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_WSTRING(arwsValue[1], arwsValue[2], 'Get STRING item is not what is expected after the get operation.');
	THIS^.AssertEquals_LREAL(arfValue[1], arfValue[2],0.01, 'Get LREAL item is not what is expected after the get operation.');

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_List_Test_Suite">
      <LineId Id="70" Count="5" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="FB_List_Test_Suite.Append_Find_Item_Indices_And_Get_Items_With_Them">
      <LineId Id="106" Count="7" />
      <LineId Id="138" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="114" Count="21" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_List_Test_Suite.Append_Items_And_Check_If_Count_Changes">
      <LineId Id="35" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="56" Count="4" />
      <LineId Id="63" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_List_Test_Suite.Append_Items_And_Get_Items">
      <LineId Id="36" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="73" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_List_Test_Suite.Append_Items_Reverse_The_List_And_Get_Items">
      <LineId Id="36" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="106" Count="4" />
      <LineId Id="105" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="73" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_List_Test_Suite.Prepend_Items_And_Get_Items">
      <LineId Id="36" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="88" Count="4" />
      <LineId Id="67" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="73" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_List_Test_Suite.Remove_Tests">
      <LineId Id="36" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="144" Count="0" />
      <LineId Id="127" Count="3" />
      <LineId Id="140" Count="0" />
      <LineId Id="131" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="133" Count="3" />
      <LineId Id="141" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="158" Count="2" />
      <LineId Id="162" Count="2" />
      <LineId Id="166" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="170" Count="0" />
      <LineId Id="176" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_List_Test_Suite.Set_Value_At_Index_To_Item_And_Get_Item">
      <LineId Id="36" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="73" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>