<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Ordered_Hash_Set_Test_Suite" Id="{36f9e988-e9d3-048b-338e-acf130be2ff0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Ordered_Hash_Set_Test_Suite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Check_If_Clear_Empties_Items();
Check_If_Contains_Returns_True_If_Item_In_Set();
Check_If_Duplicate_Items_Cannot_Be_Inserted();
Check_If_Get_Values_Returns_Values();
Check_If_Insert_Adds_Items();
Check_If_Remove_Removes_Items();]]></ST>
    </Implementation>
    <Method Name="Check_If_Clear_Empties_Items" Id="{f05465ce-2c6d-09f8-104f-56eb0fdf1d8b}">
      <Declaration><![CDATA[METHOD Check_If_Clear_Empties_Items
VAR_INST
	fbSet : FB_Ordered_Hash_Set(0);
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Clear_Empties');
	fbSet
		.Insert(sItem)
		.Insert(nItem)
		.Clear();
		
	THIS^.AssertEquals_DINT(0, fbSet._Count, 'Set was not empty after inserting data.');
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Contains_Returns_True_If_Item_In_Set" Id="{f45f8c0e-a2dd-0cd6-07a5-fa451739b5cb}">
      <Declaration><![CDATA[METHOD Check_If_Contains_Returns_True_If_Item_In_Set
VAR_INST
	fbSet : FB_Ordered_Hash_Set(0);
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
	bResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Contains_Returns_True_If_Item_In_Set');

	bResult := fbSet
		.Insert(sItem)
		.Insert(nItem)
		.Contains(nItem);
		
	THIS^.AssertEquals_BOOL(TRUE, bResult, 'Failed to check if item is in set.');
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Duplicate_Items_Cannot_Be_Inserted" Id="{793b875d-3427-062b-230d-865f9be868ee}">
      <Declaration><![CDATA[METHOD Check_If_Duplicate_Items_Cannot_Be_Inserted
VAR_INST
	fbSet : FB_Ordered_Hash_Set(0);
	arnItems : ARRAY[0..5] OF DINT := [3,1,2,1,3,2];
	i : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Duplicate_Items_Cannot_Be_Inserted');

	FOR i := 0 TO 5 DO
    	fbSet.Insert(arnItems[i]);
    	END_FOR
		
	THIS^.AssertEquals_DINT(3, fbSet._Count, 'Set inserted duplicate items.');
		
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Get_Values_Returns_Values" Id="{c6f6552b-9107-0661-3094-9b01e65cedea}">
      <Declaration><![CDATA[METHOD Check_If_Get_Values_Returns_Values
VAR_INST
	fbSet : FB_Ordered_Hash_Set(0);
	arnItems : ARRAY[0..3] OF DINT := [1,2,3,4];
	arnReturned_Items : ARRAY[0..3] OF DINT;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Get_Values_Returns_Values');

	FOR i := 0 TO 3 DO
    	fbSet.Insert(arnItems[i]);
    	END_FOR
		
	fbSet.Get_Values()
		.Get(0, arnReturned_Items[0])
		.Get(1, arnReturned_Items[1])
		.Get(2, arnReturned_Items[2])
		.Get(3, arnReturned_Items[3]);
		
	THIS^.AssertEquals_DINT(1, arnReturned_Items[0],'');
	THIS^.AssertEquals_DINT(2, arnReturned_Items[1],'');
	THIS^.AssertEquals_DINT(3, arnReturned_Items[2],'');
	THIS^.AssertEquals_DINT(4, arnReturned_Items[3],'');
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Insert_Adds_Items" Id="{e5f9e737-aeb8-0003-1e41-4b0f2fe0d7d5}">
      <Declaration><![CDATA[METHOD Check_If_Insert_Adds_Items
VAR_INST
	fbSet : FB_Ordered_Hash_Set(0);
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Insert_Adds_Items');
	fbSet
		.Insert(sItem)
		.Insert(nItem);
		
	THIS^.AssertEquals_DINT(2, fbSet._Count, 'Failed to insert items into set.');
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Remove_Removes_Items" Id="{3a866c25-1d5e-0a4e-21f0-bf5e684a8038}">
      <Declaration><![CDATA[METHOD Check_If_Remove_Removes_Items
VAR_INST
	fbSet : FB_Ordered_Hash_Set(0);
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
	fItem : LREAL := 37.4;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Remove_Removes_Items');

	fbSet
		.Insert(sItem)
		.Insert(nItem)
		.Insert(fItem)
		.Remove(nItem);
		
	THIS^.AssertEquals_DINT(2, fbSet._Count, 'Failed to remove item in set.');
	THIS^.AssertEquals_BOOL(TRUE, fbSet.Contains(sItem), 'Failed to remove item in set.');
	THIS^.AssertEquals_BOOL(FALSE, fbSet.Contains(nItem), 'Failed to remove item in set.');
	THIS^.AssertEquals_BOOL(TRUE, fbSet.Contains(fItem), 'Failed to remove item in set.');	

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>