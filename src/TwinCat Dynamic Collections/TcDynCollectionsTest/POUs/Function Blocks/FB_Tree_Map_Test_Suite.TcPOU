<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Tree_Map_Test_Suite" Id="{3e0b8c0c-852b-0076-1608-fd17583929f4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Tree_Map_Test_Suite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Check_If_Clear_Empties_Items();
Check_If_Insert_Adds_Items();
Check_If_Update_Updates_Items();
Check_If_Upsert_Updates_Items_Or_Adds_If_They_Dont_Exist();
Check_If_Remove_Removes_Items();
Check_If_Contains_Returns_True_If_Key_In_Map();
Check_If_Get_Key_Values_Returns_Keys_In_Specified_Order();]]></ST>
    </Implementation>
    <Method Name="Check_If_Clear_Empties_Items" Id="{7ef0bd11-59da-0fc3-3d4f-1fc02544aa8d}">
      <Declaration><![CDATA[METHOD Check_If_Clear_Empties_Items
VAR_INST
	fbMap : FB_Tree_Map;
	sKey : STRING := 'I love cats';
	nValue : INT := 42;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Clear_Empties');
	fbMap
		.Insert(sKey, nValue)
		.Clear();
		
	THIS^.AssertEquals_DINT(0, fbMap._Count, 'Map was not empty after inserting data.');
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Contains_Returns_True_If_Key_In_Map" Id="{301d0595-29c2-044d-05cb-d059f7a72f98}">
      <Declaration><![CDATA[METHOD Check_If_Contains_Returns_True_If_Key_In_Map
VAR_INST
	fbMap : FB_Tree_Map;
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
	bResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Contains_Returns_True_If_Key_In_Map');

	bResult := fbMap
		.Insert(sItem, nItem)
		.Insert(nItem, sItem)
		.Contains(nItem);
		
	THIS^.AssertEquals_BOOL(TRUE, bResult, 'Failed to check if item is in map.');

	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Get_Key_Values_Returns_Keys_In_Specified_Order" Id="{0879dc0b-2bf2-05d5-3cce-1e104161ecbe}">
      <Declaration><![CDATA[METHOD Check_If_Get_Key_Values_Returns_Keys_In_Specified_Order
VAR_INST
	fbMap : FB_Tree_Map;
	arnItems : ARRAY[0..3] OF DINT := [1,2,3,4];
	arnIn_Order, arnPre_Order, arnPost_Order, arnLevel_Order : ARRAY[0..3] OF DINT;
	ipKeys, ipValues : I_Immutable_List;
	i : DINT;
END_VAR
// Checked using: https://www.cs.usfca.edu/~galles/visualization/AVLtree.html
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Get_Key_Values_Returns_Keys_In_Specified_Order');

	FOR i := 0 TO 3 DO
    	fbMap.Insert(arnItems[i], arnItems[i]);
    	END_FOR
		
	fbMap._Traversal := T_BST_Traversal.In_Order;
	ipKeys := fbMap.Get_Keys();
	ipValues := fbMap.Get_Values();
	ipKeys
		.Get(0, arnIn_Order[0])
		.Get(1, arnIn_Order[1])
		.Get(2, arnIn_Order[2])
		.Get(3, arnIn_Order[3]);
	THIS^.AssertEquals_DINT(1, arnIn_Order[0],'Failed to get key with in-order traversal.');
	THIS^.AssertEquals_DINT(2, arnIn_Order[1],'Failed to get key with in-order traversal.');
	THIS^.AssertEquals_DINT(3, arnIn_Order[2],'Failed to get key with in-order traversal.');
	THIS^.AssertEquals_DINT(4, arnIn_Order[3],'Failed to get key with in-order traversal.');
	
	ipValues
		.Get(0, arnIn_Order[0])
		.Get(1, arnIn_Order[1])
		.Get(2, arnIn_Order[2])
		.Get(3, arnIn_Order[3]);
	THIS^.AssertEquals_DINT(1, arnIn_Order[0],'Failed to get values with in-order traversal.');
	THIS^.AssertEquals_DINT(2, arnIn_Order[1],'Failed to get values with in-order traversal.');
	THIS^.AssertEquals_DINT(3, arnIn_Order[2],'Failed to get values with in-order traversal.');
	THIS^.AssertEquals_DINT(4, arnIn_Order[3],'Failed to get values with in-order traversal.');
	
	fbMap._Traversal := T_BST_Traversal.Pre_Order;
	ipKeys := fbMap.Get_Keys();
	ipValues := fbMap.Get_Values();
	ipKeys
		.Get(0, arnPre_Order[0])
		.Get(1, arnPre_Order[1])
		.Get(2, arnPre_Order[2])
		.Get(3, arnPre_Order[3]);
	THIS^.AssertEquals_DINT(2, arnPre_Order[0],'Failed to get key with pre-order traversal.');
	THIS^.AssertEquals_DINT(1, arnPre_Order[1],'Failed to get key with pre-order traversal.');
	THIS^.AssertEquals_DINT(3, arnPre_Order[2],'Failed to get key with pre-order traversal.');
	THIS^.AssertEquals_DINT(4, arnPre_Order[3],'Failed to get key with pre-order traversal.');
	ipValues
		.Get(0, arnPre_Order[0])
		.Get(1, arnPre_Order[1])
		.Get(2, arnPre_Order[2])
		.Get(3, arnPre_Order[3]);
	THIS^.AssertEquals_DINT(2, arnPre_Order[0],'Failed to get value with pre-order traversal.');
	THIS^.AssertEquals_DINT(1, arnPre_Order[1],'Failed to get value with pre-order traversal.');
	THIS^.AssertEquals_DINT(3, arnPre_Order[2],'Failed to get value with pre-order traversal.');
	THIS^.AssertEquals_DINT(4, arnPre_Order[3],'Failed to get value with pre-order traversal.');
	
	fbMap._Traversal := T_BST_Traversal.Post_Order; 
	ipKeys := fbMap.Get_Keys();
	ipValues := fbMap.Get_Values();
	ipKeys
		.Get(0, arnPost_Order[0])
		.Get(1, arnPost_Order[1])
		.Get(2, arnPost_Order[2])
		.Get(3, arnPost_Order[3]);
	THIS^.AssertEquals_DINT(1, arnPost_Order[0],'Failed to get key with post-order traversal.');
	THIS^.AssertEquals_DINT(4, arnPost_Order[1],'Failed to get key with post-order traversal.');
	THIS^.AssertEquals_DINT(3, arnPost_Order[2],'Failed to get key with post-order traversal.');
	THIS^.AssertEquals_DINT(2, arnPost_Order[3],'Failed to get key with post-order traversal.');
	ipValues
		.Get(0, arnPost_Order[0])
		.Get(1, arnPost_Order[1])
		.Get(2, arnPost_Order[2])
		.Get(3, arnPost_Order[3]);
	THIS^.AssertEquals_DINT(1, arnPost_Order[0],'Failed to get value with post-order traversal.');
	THIS^.AssertEquals_DINT(4, arnPost_Order[1],'Failed to get value with post-order traversal.');
	THIS^.AssertEquals_DINT(3, arnPost_Order[2],'Failed to get value with post-order traversal.');
	THIS^.AssertEquals_DINT(2, arnPost_Order[3],'Failed to get value with post-order traversal.');
	
	fbMap._Traversal := T_BST_Traversal.Level_Order; // will get the values in ascending order
	ipKeys := fbMap.Get_Keys();
	ipValues := fbMap.Get_Values();
	ipKeys
		.Get(0, arnLevel_Order[0])
		.Get(1, arnLevel_Order[1])
		.Get(2, arnLevel_Order[2])
		.Get(3, arnLevel_Order[3]);
	THIS^.AssertEquals_DINT(2, arnLevel_Order[0],'Failed to get item with level-order traversal.');
	THIS^.AssertEquals_DINT(1, arnLevel_Order[1],'Failed to get item with level-order traversal.');
	THIS^.AssertEquals_DINT(3, arnLevel_Order[2],'Failed to get item with level-order traversal.');
	THIS^.AssertEquals_DINT(4, arnLevel_Order[3],'Failed to get item with level-order traversal.');
	ipValues
		.Get(0, arnLevel_Order[0])
		.Get(1, arnLevel_Order[1])
		.Get(2, arnLevel_Order[2])
		.Get(3, arnLevel_Order[3]);
	THIS^.AssertEquals_DINT(2, arnLevel_Order[0],'Failed to get value with level-order traversal.');
	THIS^.AssertEquals_DINT(1, arnLevel_Order[1],'Failed to get value with level-order traversal.');
	THIS^.AssertEquals_DINT(3, arnLevel_Order[2],'Failed to get value with level-order traversal.');
	THIS^.AssertEquals_DINT(4, arnLevel_Order[3],'Failed to get value with level-order traversal.');
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Insert_Adds_Items" Id="{32518d9c-596f-0976-2c0f-2fd62041699c}">
      <Declaration><![CDATA[METHOD Check_If_Insert_Adds_Items
VAR_INST
	fbMap : FB_Tree_Map;
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Insert_Adds_Items');

	fbMap
		.Insert(sItem, nItem)
		.Insert(nItem, sItem);
		
	THIS^.AssertEquals_DINT(2, fbMap._Count, 'Failed to insert items into map.');
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Remove_Removes_Items" Id="{b5735366-867d-0992-2541-e98ba93f1e4b}">
      <Declaration><![CDATA[METHOD Check_If_Remove_Removes_Items
VAR_INST
	fbMap : FB_Tree_Map;
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
	fItem : LREAL := 37.4;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Remove_Removes_Items');

	fbMap
		.Insert(sItem, nItem)
		.Insert(nItem, fItem)
		.Insert(fItem, sItem)
		.Remove(nItem);
		
	THIS^.AssertEquals_DINT(2, fbMap._Count, 'Failed to remove item in set.');
	THIS^.AssertEquals_BOOL(TRUE, fbMap.Contains(sItem), 'Failed to remove item in set.');
	THIS^.AssertEquals_BOOL(FALSE, fbMap.Contains(nItem), 'Failed to remove item in set.');
	THIS^.AssertEquals_BOOL(TRUE, fbMap.Contains(fItem), 'Failed to remove item in set.');	
	
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Update_Updates_Items" Id="{731e4715-ac2f-0ecc-0b4a-200354d25d71}">
      <Declaration><![CDATA[METHOD Check_If_Update_Updates_Items
VAR_INST
	fbMap : FB_Tree_Map;
	sItem : STRING := 'I love cats';
	nItem : INT := 42;
	fItem : LREAL := 37.4;
	fNew_Item : LREAL := 3.14;
	fR_Item,
	fR_Updated_Item : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Update_Updates_Items');
	fbMap
		.Insert(sItem, nItem)
		.Insert(nItem, fItem)
		.Insert(fItem, sItem)
		.Get(nItem, fR_Item)
		.Update(nItem, fNew_Item)
		.Get(nItem, fR_Updated_Item);
	
	THIS^.AssertEquals_LREAL(37.4, fR_Item, 0.0001, 'Failed to get value to be updated in map.');
	THIS^.AssertEquals_LREAL(3.14, fR_Updated_Item, 0.0001, 'Failed to get updated value in map.');
		
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_If_Upsert_Updates_Items_Or_Adds_If_They_Dont_Exist" Id="{d619bc68-4d4d-0191-3750-9ccfaed05f09}">
      <Declaration><![CDATA[METHOD Check_If_Upsert_Updates_Items_Or_Adds_If_They_Dont_Exist
VAR_INST
	fbMap : FB_Tree_Map;
	nItem : INT := 42;
	fItem : LREAL := 37.4;
	fNew_Item : LREAL := 3.14;
	fR_Item,
	fR_Updated_Item : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Check_If_Upsert_Updates_Items_Or_Adds_If_They_Dont_Exist');
	fbMap
		.Upsert(nItem, fItem)
		.Get(nItem, fR_Item)
		.Upsert(nItem, fNew_Item)
		.Get(nItem, fR_Updated_Item);
		
	THIS^.AssertEquals_LREAL(37.4, fR_Item, 0.0001, 'Failed to insert key value in map.');
	THIS^.AssertEquals_LREAL(3.14, fR_Updated_Item, 0.0001, 'Failed to update value in map.');
	TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Tree_Map_Test_Suite">
      <LineId Id="38" Count="5" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Map_Test_Suite.Check_If_Clear_Empties_Items">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Map_Test_Suite.Check_If_Contains_Returns_True_If_Key_In_Map">
      <LineId Id="6" Count="0" />
      <LineId Id="19" Count="5" />
      <LineId Id="18" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Map_Test_Suite.Check_If_Get_Key_Values_Returns_Keys_In_Specified_Order">
      <LineId Id="6" Count="0" />
      <LineId Id="91" Count="5" />
      <LineId Id="151" Count="0" />
      <LineId Id="97" Count="9" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="7" />
      <LineId Id="154" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="110" Count="8" />
      <LineId Id="165" Count="7" />
      <LineId Id="164" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="121" Count="9" />
      <LineId Id="175" Count="7" />
      <LineId Id="174" Count="0" />
      <LineId Id="131" Count="2" />
      <LineId Id="183" Count="0" />
      <LineId Id="134" Count="7" />
      <LineId Id="90" Count="0" />
      <LineId Id="185" Count="7" />
      <LineId Id="184" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Map_Test_Suite.Check_If_Insert_Adds_Items">
      <LineId Id="6" Count="0" />
      <LineId Id="20" Count="4" />
      <LineId Id="19" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Map_Test_Suite.Check_If_Remove_Removes_Items">
      <LineId Id="6" Count="0" />
      <LineId Id="21" Count="9" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Map_Test_Suite.Check_If_Update_Updates_Items">
      <LineId Id="6" Count="0" />
      <LineId Id="20" Count="3" />
      <LineId Id="31" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Map_Test_Suite.Check_If_Upsert_Updates_Items_Or_Adds_If_They_Dont_Exist">
      <LineId Id="6" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>