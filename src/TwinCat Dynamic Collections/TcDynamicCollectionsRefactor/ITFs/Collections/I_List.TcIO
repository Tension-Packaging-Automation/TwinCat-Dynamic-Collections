<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <Itf Name="I_List" Id="{c35ae620-5aa5-4d40-bc73-0628d68fb199}">
    <Declaration><![CDATA[// Interface for a list.
INTERFACE I_List EXTENDS I_Collection
]]></Declaration>
    <Method Name="Append" Id="{2c2a8692-5f1a-42e3-b753-28ff136db0a0}">
      <Declaration><![CDATA[// Adds an item to the end of the list.
METHOD Append : I_List
VAR_INPUT
	Item : ANY; // Value to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Clear" Id="{0d416646-ce75-41c7-93f1-fa88e5312884}">
      <Declaration><![CDATA[// Empties/Clears/Deletes every item in the list.
METHOD Clear : I_List
]]></Declaration>
    </Method>
    <Method Name="Contains" Id="{ecbbe4e9-9f49-4393-995d-36c66ca38a77}">
      <Declaration><![CDATA[// Checks if item is contained in list.
METHOD Contains : BOOL
VAR_INPUT
	Item : ANY; // Item to find in list
END_VAR]]></Declaration>
    </Method>
    <Method Name="Get" Id="{a6c0cb76-f395-42c3-98fa-8688cd7bcf40}">
      <Declaration><![CDATA[// Gets item from list at specified location without removing it
METHOD Get : I_List
VAR_INPUT
	Index : T_Position; // Location of item
	Item : ANY;  // Variable to store returned item
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Get_As_String" Id="{5b460983-f71b-4548-a845-e80e79894281}">
      <Declaration><![CDATA[// Returns item as a string, if type to string conversion is supported
METHOD Get_As_String : I_List
VAR_INPUT
	Index : T_Position; // Location of item
	sItem : REFERENCE TO STRING; // Variable to store returned item.
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Get_Generic" Id="{c7ef4b83-18bc-45ab-8ebb-d0ce12d5e2d7}">
      <Declaration><![CDATA[// Gets a value from a list in it's generic form.
// (** Use carefully as this contains the pointer of the actual value in the collection. **)
// If you wish to use this it is recommeded you create a copy of the returned value using MEMMOVE or MEMCPY
METHOD Get_Generic : I_List
VAR_INPUT
	Index : T_Position; // Location of item
END_VAR
VAR_OUTPUT
	Item : T_Generic;
	bSuccess : BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Get_Type_At" Id="{bcc5e8eb-eee1-460c-b18a-b78bf57fdf89}">
      <Declaration><![CDATA[// Gets the type of the item at specified location.
METHOD Get_Type_At : I_List
VAR_INPUT
	Index : T_Position;
END_VAR
VAR_OUTPUT
	Item_Type : T_Type;
	bSuccess : BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Insert" Id="{7afc535d-da3c-42fd-8150-d9708c1c60d4}">
      <Declaration><![CDATA[// Adds new item to list at specified location, if index = 0, item will be added at the front, if index = count, item will be added at the back
METHOD Insert : I_List
VAR_INPUT
	Index : T_Position; // Location of item
	Item : ANY; // Item to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Insert_Generic" Id="{622d988c-ddf2-492f-9d69-77a32c699123}">
      <Declaration><![CDATA[// Adds new item to list at specified location using the generic form. 
// If index = 0, item will be added at the front, if index = count, item will be added at the back
METHOD Insert_Generic : I_List
VAR_INPUT
	Index 	 : T_Position; 	// Location of item
	Item 	 : T_Generic;  	// Item to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Prepend" Id="{7fcf3c6e-6255-4977-af51-867394ac51a7}">
      <Declaration><![CDATA[// Adds an item at the front of the list.
METHOD Prepend : I_List
VAR_INPUT
	Item : ANY; // Value to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Remove" Id="{d62df327-3944-4d44-927c-e3b5089cccd9}">
      <Declaration><![CDATA[// Removes item from the list.
METHOD Remove : I_List
VAR_INPUT
	Item : ANY; // Item to remove from in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Remove_At" Id="{0d7dc131-a66b-41cf-80ec-2d0cd5b3556f}">
      <Declaration><![CDATA[// Remove item at specified location 
METHOD Remove_At : I_List
VAR_INPUT
	Index : T_Position; // Location of item
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Remove_Last" Id="{6bdf680a-7043-4466-8981-189621b71b4f}">
      <Declaration><![CDATA[// Removes item at the back of the list.
METHOD Remove_Last : I_List
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Resize" Id="{8eda794e-3f80-4e15-903d-5521baeb3ac9}">
      <Declaration><![CDATA[// Manually resize list. If list becomes smaller, item on higher locations will be deleted.
METHOD Resize : I_List
VAR_INPUT
	Size : T_Capacity; // New size of list.
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Reverse" Id="{59e5f74e-02b5-4605-a1c7-5c5c92a05a12}">
      <Declaration><![CDATA[// Reverses the order of items in the list
METHOD Reverse : I_List
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Search" Id="{ff95ed5c-7136-4a55-b348-56925fe569aa}">
      <Declaration><![CDATA[// Find the location of an item in list.
METHOD Search : I_List
VAR_INPUT
	Item : ANY; // Item to find in list
END_VAR
VAR_OUTPUT
	Index : T_Position; //Location of item in list 
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
    <Method Name="Set" Id="{0a67740f-03ed-4f49-808f-f73b23a55b92}">
      <Declaration><![CDATA[// Changes the item at the specified location in the list.
METHOD Set : I_List
VAR_INPUT
	Index 	: T_Position; // Location of item
	Item 	: ANY; 	// Item to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Set_Generic" Id="{88a29785-c2d8-480f-8a82-63ee45b330ed}">
      <Declaration><![CDATA[// Changes the item at the specified location in the list in it's generic form.
METHOD Set_Generic : I_List
VAR_INPUT
	Index : T_Position; // Location of item
	Item : T_Generic; // Item to store in list
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Swap" Id="{320be13d-144f-4adb-8378-4c6ad25c3f21}">
      <Declaration><![CDATA[// Swaps item at index A with item at index B.
METHOD Swap : I_List
VAR_INPUT
	Index_A, Index_B : T_Position;
END_VAR
VAR_OUTPUT
	bSuccess : BOOL;
END_VAR]]></Declaration>
    </Method>
  </Itf>
</TcPlcObject>