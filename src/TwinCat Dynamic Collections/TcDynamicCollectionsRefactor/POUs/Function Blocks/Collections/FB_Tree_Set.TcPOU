<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Tree_Set" Id="{c56d9f43-89e6-4b66-ae7f-c61def2bb7fa}" SpecialFunc="None">
    <Declaration><![CDATA[// A collection that contains no duplicate item implemented using an iterative AVL Tree.
// This data structure was implemented with the help of Max Goren's iterative AVL tree in C++. See Fucntion Block's body for more details.
{attribute 'enable_dynamic_creation'}
{attribute 'no_assign'}
{attribute 'no_explicit_call' := 'direct call for this function block is not allowed'}
FUNCTION_BLOCK FINAL FB_Tree_Set EXTENDS FB_Collection IMPLEMENTS I_Tree_Set //, I_Enumerable, I_Copyable
VAR
	pRoot : POINTER TO T_AVL_Node;
	Traversal : T_BST_Traversal := T_BST_Traversal.In_Order; 
	pValues : POINTER TO FB_Array_List;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
	https://github.com/maxgoren
	http://www.maxgcoding.com/iterative-avl-trees-insertion/
	http://www.maxgcoding.com/iterative-avl-trees-deletion/

	MIT License
	
	Copyright (c) 2023 Max Goren
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*)
]]></ST>
    </Implementation>
    <Folder Name="Internal" Id="{1b5a463d-0aa0-44da-8241-129dd42beb15}" />
    <Property Name="_Traversal" Id="{72c20f3a-eca4-4281-94ad-aeb585511b17}">
      <Declaration><![CDATA[// Traversal method for retrieving values in the tree set.
PROPERTY _Traversal : T_BST_Traversal]]></Declaration>
      <Get Name="Get" Id="{31ad6f1b-1b2c-4409-aa6d-08a738218951}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Traversal := THIS^.Traversal;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{05adcb79-5dad-4011-bf2d-06d453e5c749}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.Traversal := _Traversal;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Balance" Id="{28363524-e7c2-411c-931e-da79c4b4e6de}" FolderPath="Internal\">
      <Declaration><![CDATA[// Performs rotation and updates heights until tree is balanced.
METHOD PROTECTED Balance
VAR_INPUT
    pNode : POINTER TO T_AVL_Node;
END_VAR
VAR 
	pTmp : POINTER TO T_AVL_Node;
    Balance_Factor : T_Position;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE pNode <> 0 AND_THEN pNode^.pParent <> 0 DO
	pTmp := pNode^.pParent;
	
	THIS^.Update_Height(pTmp);
	
	IF THIS^.Get_Balance(pTmp) < -1 THEN
		IF THIS^.Get_Balance(pTmp^.pRight) > 0 THEN THIS^.Rotate_Right(pTmp^.pRight); END_IF
		THIS^.Rotate_Left(pTmp);
		
	ELSIF THIS^.Get_Balance(pTmp) > 1 THEN
		IF THIS^.Get_Balance(pTmp^.pLeft) < 0 THEN THIS^.Rotate_Left(pTmp^.pLeft); END_IF
		THIS^.Rotate_Right(pTmp);
		END_IF
	
	pNode := pNode^.pParent;
	END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{8ee30748-e519-4483-8599-90409921dd6f}">
      <Declaration><![CDATA[// Empties/Clears/Deletes every item in the set.
METHOD Clear : I_Set]]></Declaration>
      <Implementation>
        <ST><![CDATA[Clear := THIS^;

THIS^.Clear_Node(THIS^.pRoot);

IF THIS^.pValues <> 0 THEN  __DELETE(THIS^.pValues); END_IF

THIS^.pRoot := 0;
THIS^._Count := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear_Node" Id="{89f55fce-3d65-4764-a209-4a95af652a6f}" FolderPath="Internal\">
      <Declaration><![CDATA[// Deletes the node and its tree/sub-trees.
{warning disable C0394}
METHOD PROTECTED Clear_Node
VAR_INPUT
	pRoot : POINTER TO T_AVL_Node;
END_VAR
VAR
	fbNode_Stack : FB_Stack;
	pTmp : POINTER TO T_AVL_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pRoot = 0 THEN RETURN; END_IF

fbNode_Stack.Push(pRoot);

WHILE NOT fbNode_Stack._Is_Empty DO
	fbNode_Stack.Get(pTmp);
	fbNode_Stack.Pop();
	
	IF pTmp^.pRight <> 0 THEN fbNode_Stack.Push(pTmp^.pRight); END_IF
	IF pTmp^.pLeft <> 0 THEN fbNode_Stack.Push(pTmp^.pLeft); END_IF
	
	THIS^.Delete_Node(pTmp);
	END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{c8991bf5-844b-40d2-8a13-1ddc8e02a4cc}">
      <Declaration><![CDATA[// Checks if item is contained in set.
METHOD Contains : BOOL
VAR_INPUT
	Item : ANY; // Item to find.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Contains := THIS^.Search_Node(THIS^.pRoot, Item) <> 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Create_Node" Id="{7ee37ff1-a215-4d00-af51-9a1be461fce4}" FolderPath="Internal\">
      <Declaration><![CDATA[// Creates a new node in dynamic memory with a clone of the generic item as it data.
METHOD PROTECTED Create_Node : POINTER TO ST_AVL_NODE
VAR_INPUT
	Item : T_Generic;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Create_Node := __NEW(ST_AVL_NODE);
Create_Node^.Data := F_Clone_Generic(Item);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Delete_Node" Id="{e162e812-a075-45b5-be14-c647c196b12b}" FolderPath="Internal\">
      <Declaration><![CDATA[// Safety deletes node.
// If the node and/or it's value/data is in dynamic memory it/they will be deleted.
METHOD PROTECTED Delete_Node
VAR_INPUT
	pNode : REFERENCE TO POINTER TO T_AVL_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (pNode = 0) THEN RETURN; END_IF 

F_Delete_Generic(pNode^.Data);

CASE Tc2_System.F_CheckMemoryArea(pNode, 1) OF
	Tc2_System.E_TcMemoryArea.Dynamic: __DELETE(pNode);
ELSE
	pNode := 0;
	END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{181f3e47-1284-4bef-bd79-f944b46ac227}">
      <Declaration><![CDATA[{attribute 'hide'}
METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// If this is an online change or this collection is empty then ignore. 
IF bInCopyCode THEN RETURN; END_IF

THIS^.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find_Minimum_Node" Id="{2fd9878e-b541-48f9-bb0c-363915060888}" FolderPath="Internal\">
      <Declaration><![CDATA[// Finds the node with the smallest item in a tree or sub-tree.
METHOD PROTECTED Find_Minimum_Node : POINTER TO T_AVL_Node
VAR_INPUT
	pNode : POINTER TO T_AVL_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pNode = 0 THEN RETURN; END_IF

WHILE pNode^.pLeft <> 0 DO
	pNode := pNode^.pLeft;
	END_WHILE
	
Find_Minimum_Node := pNode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_Balance" Id="{0751589d-96d1-4e24-b37e-fd0eb05a4dee}" FolderPath="Internal\">
      <Declaration><![CDATA[// Gets the difference between the left and right sub-trees.
METHOD PROTECTED Get_Balance : T_Position
VAR_INPUT
	pNode : POINTER TO T_AVL_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get_Balance :=  THIS^.Get_Height(pNode^.pLeft) - THIS^.Get_Height(pNode^.pRight);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_Height" Id="{f12a6cd6-bf01-47d7-af97-7f0d5c2fcff5}" FolderPath="Internal\">
      <Declaration><![CDATA[// Safely gets the height of a sub-tree.
METHOD PROTECTED Get_Height : T_Position
VAR_INPUT
	pNode : POINTER TO T_AVL_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get_Height := SEL(pNode <> 0, -1, pNode^.Height);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_Values" Id="{ec5febe0-5797-49ff-bc49-630073fb1bad}">
      <Declaration><![CDATA[// Gets an immutable list of the values in the set.
{warning disable C0394}
METHOD Get_Values : I_Immutable_List
VAR_INST
	fbImmutable_List : FB_Immutable_List;
END_VAR
VAR
	pCurrent : POINTER TO T_AVL_Node;
	fbNode_Buffer : FB_Queue;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.pValues = 0 THEN THIS^.pValues := __NEW(FB_Array_List(Initial_Capacity := 0)); END_IF
fbImmutable_List(ipList := THIS^.pValues^);
Get_Values := fbImmutable_List;

THIS^.pValues^.Clear();

IF THIS^.pRoot = 0 THEN RETURN; END_IF

fbNode_Buffer.Enqueue(THIS^.pRoot);

WHILE NOT fbNode_Buffer._Is_Empty DO
	fbNode_Buffer.Get(pCurrent).Dequeue();
	
	CASE THIS^._Traversal OF
		T_BST_Traversal.In_Order:
			IF pCurrent^.pLeft <> 0 THEN fbNode_Buffer.Enqueue_At_Front(pCurrent^.pLeft); END_IF
			THIS^.pValues^.Insert_Generic(THIS^.pValues^._Count, pCurrent^.Data);
			IF pCurrent^.pRight <> 0 THEN fbNode_Buffer.Enqueue_At_Front(pCurrent^.pRight); END_IF
			
		T_BST_Traversal.Pre_Order:
			THIS^.pValues^.Insert_Generic(THIS^.pValues^._Count, pCurrent^.Data);
			IF pCurrent^.pLeft <> 0 THEN fbNode_Buffer.Enqueue_At_Front(pCurrent^.pLeft); END_IF
			IF pCurrent^.pRight <> 0 THEN fbNode_Buffer.Enqueue_At_Front(pCurrent^.pRight); END_IF
			
		T_BST_Traversal.Post_Order:
			IF pCurrent^.pLeft <> 0 THEN fbNode_Buffer.Enqueue_At_Front(pCurrent^.pLeft); END_IF
			IF pCurrent^.pRight <> 0 THEN fbNode_Buffer.Enqueue_At_Front(pCurrent^.pRight); END_IF
			THIS^.pValues^.Insert_Generic(THIS^.pValues^._Count, pCurrent^.Data);
			
		T_BST_Traversal.Level_Order:
			THIS^.pValues^.Insert_Generic(THIS^.pValues^._Count, pCurrent^.Data);
			IF pCurrent^.pLeft <> 0 THEN fbNode_Buffer.Enqueue(pCurrent^.pLeft); END_IF
			IF pCurrent^.pRight <> 0 THEN fbNode_Buffer.Enqueue(pCurrent^.pRight); END_IF
	ELSE
		RETURN;
		END_CASE
	END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{ebd02f71-363b-44f4-a971-21c752b47edc}">
      <Declaration><![CDATA[// Insert item into set.
METHOD Insert 	: I_Set
VAR_INPUT
	Item : ANY; // Data to insert
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Insert := THIS^.Insert_Generic(Item, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert_Generic" Id="{b599f82d-d32f-451c-9c3e-346305e0b88d}">
      <Declaration><![CDATA[// Adds new generic item at into set.
// The set will store a copy of the generic item so as to not modify the original value outside it's scope.
METHOD Insert_Generic : I_Set
VAR_INPUT
	Item : T_Generic; // Item to store
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR
VAR
	pCurrent, pPrevious : POINTER TO T_AVL_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Insert_Generic := THIS^;

pCurrent := THIS^.pRoot;
pPrevious := pCurrent;

WHILE pCurrent <> 0 DO
	pPrevious := pCurrent;
	CASE F_Compare_Generics(Item, pCurrent^.Data) OF
		T_Comparison.Less 	 : pCurrent := pCurrent^.pLeft;
		T_Comparison.Greater : pCurrent := pCurrent^.pRight;
		T_Comparison.Equal 	 : RETURN;
	ELSE
		THIS^._Error_Status := F_Error(TRUE, GVL_Errors.ERR_NOT_SUPPORTED, 'Invalid comparison.');
		RETURN;
		END_CASE
	END_WHILE

pCurrent := THIS^.Create_Node(Item);

IF pPrevious = 0 THEN
	THIS^.pRoot := pCurrent;
ELSE
	CASE F_Compare_Generics(Item, pPrevious^.Data) OF
		T_Comparison.Less: pPrevious^.pLeft := pCurrent;
	ELSE
		pPrevious^.pRight := pCurrent;
		END_CASE
	END_IF

pCurrent^.pParent := pPrevious;
	
THIS^.Balance(pCurrent);

bSuccess := TRUE;
THIS^.Increment_Count();
THIS^.Clear_Error(); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="Move_Node" Id="{b9e6eb30-0496-4774-acfa-dd84df6f82f1}" FolderPath="Internal\">
      <Declaration><![CDATA[// Moves from node at source into the position of the destination.
METHOD PROTECTED Move_Node
VAR_INPUT
	pDestination, pSource : POINTER TO T_AVL_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pDestination^.pParent = 0 THEN
	THIS^.pRoot := pSource;
ELSIF pDestination = pDestination^.pParent^.pLeft THEN
	pDestination^.pParent^.pLeft := pSource;
ELSE
	pDestination^.pParent^.pRight := pSource;
	END_IF
	
IF pSource <> 0 THEN
	pSource^.pParent := pDestination^.pParent;
	END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{eea09d09-60d3-41e0-b223-e8fa6be923f2}">
      <Declaration><![CDATA[// Removes item from the set.
METHOD Remove : I_Set
VAR_INPUT
	Item : ANY; // Data to remove
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove := THIS^.Remove_Generic(Item, bSuccess => bSuccess);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove_Generic" Id="{b8cfe05d-aa17-4a1e-bf72-e57bc9b37e74}">
      <Declaration><![CDATA[// Removes generic item from the set.
METHOD Remove_Generic : I_Set
VAR_INPUT
	Item : T_Generic; // Data to remove
END_VAR
VAR_OUTPUT
	bSuccess : BOOL; // Indicates whether operation was successful. Success = TRUE, Failure = FALSE
END_VAR
VAR
	pTmp : POINTER TO T_AVL_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove_Generic := THIS^;

pTmp := THIS^.Search_Node(THIS^.pRoot, Item);

IF pTmp = 0 THEN RETURN; END_IF

THIS^.Remove_Node(pTmp);
THIS^.Balance(pTmp);

bSuccess := TRUE;
THIS^.Decrement_Count();
THIS^.Clear_Error();

IF THIS^._Is_Empty THEN THIS^.pRoot := 0; END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove_Node" Id="{98a5d1a0-9e06-4497-b421-01f3df0a9013}" FolderPath="Internal\">
      <Declaration><![CDATA[// Finds and removes a node from a tree/sub-tree.
METHOD PROTECTED Remove_Node
VAR_INPUT
	pNode : POINTER TO T_AVL_Node;
END_VAR
VAR
	pTmp, pSuccessor : POINTER TO T_AVL_Node;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pTmp := pNode;

IF pNode^.pLeft = 0 THEN
	THIS^.Move_Node(pNode, pNode^.pRight);
ELSIF pNode^.pRight = 0 THEN 
	THIS^.Move_Node(pNode, pNode^.pLeft);
ELSE
	pSuccessor := THIS^.Find_Minimum_Node(pNode^.pRight);
	IF pSuccessor^.pParent <> pNode THEN 
		THIS^.Move_Node(pSuccessor, pSuccessor^.pRight);
		pSuccessor^.pRight := pNode^.pRight;
		pSuccessor^.pRight^.pParent := pSuccessor;
		END_IF
	THIS^.Move_Node(pNode, pSuccessor);
	pSuccessor^.pLeft := pNode^.pLeft;
	pSuccessor^.pLeft^.pParent := pSuccessor;
	END_IF

THIS^.Delete_Node(pTmp);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Rotate_Left" Id="{fac40ecf-e0ac-4c04-88d2-08c5967ae316}" FolderPath="Internal\">
      <Declaration><![CDATA[// Rotates a tree/sub-tree left.
METHOD PROTECTED Rotate_Left
VAR_INPUT
    pX : POINTER TO T_AVL_Node;
END_VAR
VAR
    pY : POINTER TO T_AVL_Node := pX^.pRight;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pY <> 0 THEN
	pX^.pRight := pY^.pLeft;
	IF pY^.pLeft <> 0 THEN pY^.pLeft^.pParent := pX; END_IF
	pY^.pParent := pX^.pParent;
	END_IF
	
IF pX^.pParent = 0 THEN
	THIS^.pRoot := pY;
ELSIF pX = pX^.pParent^.pLeft THEN
	pX^.pParent^.pLeft := pY;
ELSE
	pX^.pParent^.pRight := pY;
	END_IF
	
IF pY <> 0 THEN pY^.pLeft := pX; END_IF
	
pX^.pParent := pY;
THIS^.Update_Height(pX);
THIS^.Update_Height(pY);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Rotate_Right" Id="{1c83ad1f-4f62-41bb-afe5-b56978035c7f}" FolderPath="Internal\">
      <Declaration><![CDATA[// Rotates a tree/sub-tree right.
METHOD PROTECTED Rotate_Right
VAR_INPUT
    pX : POINTER TO T_AVL_Node;
END_VAR
VAR
    pY : POINTER TO T_AVL_Node := pX^.pLeft;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pY <> 0 THEN
	pX^.pLeft := pY^.pRight;
	IF pY^.pRight <> 0 THEN pY^.pRight^.pParent := pX; END_IF
	pY^.pParent := pX^.pParent;
	END_IF
	
IF pX^.pParent = 0 THEN
	THIS^.pRoot := pY;
ELSIF pX = pX^.pParent^.pLeft THEN
	pX^.pParent^.pLeft := pY;
ELSE
	pX^.pParent^.pRight := pY;
	END_IF
	
IF pY <> 0 THEN pY^.pRight := pX; END_IF
	
pX^.pParent := pY;
THIS^.Update_Height(pX);
THIS^.Update_Height(pY);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Search_Node" Id="{b24c89ed-ddc9-4bf0-8f0d-31804a9b80e8}" FolderPath="Internal\">
      <Declaration><![CDATA[// Checks if an item is in a tree/ sub-tree.
METHOD PROTECTED Search_Node : POINTER TO T_AVL_Node
VAR_INPUT
	pNode : POINTER TO T_AVL_Node;
	Item : T_Generic;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE pNode <> 0 DO
	CASE F_Compare_Generics(Item, pNode^.Data) OF
		T_Comparison.Less	: pNode := pNode^.pLeft;
		T_Comparison.Greater: pNode := pNode^.pRight; 
		T_Comparison.Equal	: 
			Search_Node := pNode;
			RETURN;
		END_CASE
	END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update_Height" Id="{9b5a9884-21e1-42d8-acef-f9729c41e342}" FolderPath="Internal\">
      <Declaration><![CDATA[METHOD PROTECTED Update_Height
VAR_INPUT
	pNode : POINTER TO T_AVL_Node;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode^.Height := 1 + MAX(THIS^.Get_Height(pNode^.pLeft), THIS^.Get_Height(pNode^.pRight));]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Tree_Set">
      <LineId Id="9" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="22" Count="19" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="1" />
    </LineIds>
    <LineIds Name="FB_Tree_Set._Traversal.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set._Traversal.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Balance">
      <LineId Id="335" Count="14" />
      <LineId Id="283" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Clear">
      <LineId Id="16" Count="6" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Clear_Node">
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Contains">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Create_Node">
      <LineId Id="8" Count="1" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Delete_Node">
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.FB_exit">
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Find_Minimum_Node">
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Get_Balance">
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Get_Height">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Get_Values">
      <LineId Id="15" Count="2" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="42" Count="3" />
      <LineId Id="28" Count="0" />
      <LineId Id="46" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Insert">
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Insert_Generic">
      <LineId Id="132" Count="34" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Move_Node">
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="15" Count="3" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Remove">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Remove_Generic">
      <LineId Id="36" Count="12" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Remove_Node">
      <LineId Id="129" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="158" Count="2" />
      <LineId Id="164" Count="2" />
      <LineId Id="173" Count="1" />
      <LineId Id="167" Count="3" />
      <LineId Id="157" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="162" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Rotate_Left">
      <LineId Id="153" Count="0" />
      <LineId Id="204" Count="2" />
      <LineId Id="194" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="199" Count="3" />
      <LineId Id="198" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="167" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Rotate_Right">
      <LineId Id="129" Count="12" />
      <LineId Id="145" Count="1" />
      <LineId Id="142" Count="2" />
      <LineId Id="74" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Search_Node">
      <LineId Id="45" Count="7" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_Tree_Set.Update_Height">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>